<footer class="footer">
  <div class="content has-text-centered">
    <p>&copy; {{ 'now' | date: '%Y' }} Escola com Maria. Código disponível sob licença MIT.</p>
    <p class="title">Fale Conosco</p>
    <p>
      Email:
      <a href="mailto:escolacommaria@gmail.com" class="email-link">escolacommaria@gmail.com</a>
    </p>
    <div class="social-icons">
      <a
        class="insta"
        href="https://www.instagram.com/escola_com_maria"
        target="_blank"
        aria-label="Instagram"
      >
        <i class="fab fa-instagram"></i>
      </a>
      <a
        href="https://www.santacruzbarueri.com.br/"
        target="_blank"
        aria-label="Paróquia Santa Cruz"
        class="santacruz-link"
      >
        <img src="/images/logo_santacruz.png" alt="Paróquia Santa Cruz" class="santacruz-logo">
      </a>
    </div>
  </div>

  <div class="download-pdf-container" style="margin-top: 1rem;">
    <a
      href="{{ '/static/preparacao-a-consagracao.pdf' | relative_url }}"
      download
      class="button download-pdf-button"
      aria-label="Download do PDF Preparação à Consagração"
    >
      📄 Preparação à Consagração (PDF)
    </a>
  </div>

  {% comment %}
    <div class="audio-player minimized" id="audio-player">
      <div class="player-header">
        <p id="player-title" class="player-title" title="Clique para abrir/fechar o player">
          <i class="fas fa-headphones"></i>🎧 VOZ DE TROVÃO - COLO DE DEUS
        </p>
        <button
          id="toggle-minimize"
          class="minimize-button"
          aria-label="Minimizar player"
          title="Minimizar / Maximizar player"
        >
          <i class="🎧 fas fa-chevron-down"></i>
        </button>
      </div>

      <audio id="player" style="display:none;">
        <source id="audio-source" src="/music/voz_de_trovao.mp3" type="audio/mpeg">
      </audio>

      <div class="player-controls">
        <span id="prev-audio" class="control-button" role="button" tabindex="0" aria-label="Anterior">
          <i class="fas fa-step-backward"></i>
        </span>
        <span id="toggle-audio" class="control-button" role="button" tabindex="0" aria-label="Tocar / Pausar">
          <i class="fas fa-play-circle"></i>
        </span>
        <span id="next-audio" class="control-button" role="button" tabindex="0" aria-label="Próxima">
          <i class="fas fa-step-forward"></i>
        </span>
        <div id="progress-container" class="progress-bar">
          <div id="progress"></div>
          <div id="progress-text">00:00 / 00:00</div>
        </div>
        <button id="volume-icon" class="control-button" aria-label="Volume">
          <i class="fas fa-volume-up"></i>
        </button>
        <input id="volume-control" class="volume-slider" type="range" min="0" max="1" step="0.01" value="1">
      </div>
    </div>
  {% endcomment %}

  <style>
    .footer {
      background-color: black;
      padding: 20px;
      text-align: center;
    }

    .footer p {
      color: rgb(143, 133, 83);
      font-size: 1rem;
    }

    .footer a.email-link {
      color: rgb(196, 179, 95);
      text-decoration: underline;
    }

    .footer a.email-link:hover {
      color: rgb(255, 215, 0);
    }

    .footer .social-icons {
      margin-top: 10px;
      display: flex;
      justify-content: center;
      gap: 20px;
      align-items: center;
    }

    .footer .social-icons a {
      font-size: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;

      margin: 0 10px;
    }

    .insta {
      color: rgb(143, 133, 83);;
    }

    {% comment %} .footer .social-icons a:hover {
      rgb(255, 217, 0);
    } {% endcomment %}

    .santacruz-link img.santacruz-logo {
      height: 2.1rem;
      width: auto;
      cursor: pointer;
      transition: filter 0.3s;
    }

    .download-pdf-button {
      background-color: rgb(196, 179, 95);
      color: black;
      font-weight: 600;
      padding: 0.5rem 1.2rem;
      border-radius: 6px;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      transition: background-color 0.3s ease, color 0.3s ease;
      border: none;
      cursor: pointer;
    }

    .download-pdf-button:hover {
      background-color: rgb(255, 215, 0);
      color: black;
      text-decoration: none;
    }

    {% comment %} .footer .social-icons a:hover,
    .footer .social-icons .santacruz-link:hover img.santacruz-logo {
      color: rgb(255, 215, 0);
    } {% endcomment %}

    .audio-player {
      position: fixed;
      bottom: 0;
      left: 20px;
      background-color: rgba(0, 0, 0, 0.9);
      border: 1px solid rgb(196, 179, 95);
      border-radius: 10px;
      padding: 10px 12px;
      z-index: 9999;
      max-width: 360px;
      display: flex;
      flex-direction: column;
      gap: 4px;
      transition: height 0.3s, width 0.3s;
    }

    .player-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .player-title {
      color: rgb(196, 179, 95);
      font-size: 0.9rem;
      margin: 0;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 290px;
      cursor: pointer;
    }

    .minimize-button {
      background: transparent;
      border: none;
      color: rgb(196, 179, 95);
      font-size: 1rem;
      cursor: pointer;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0;
      transition: transform 0.3s;
    }

    .player-controls {
      display: flex;
      align-items: center;
      gap: 8px;
      transition: opacity 0.3s;
    }

    .audio-player.minimized {
      width: 306px;
      height: 32px;
      padding: 6px 12px;
    }

    .audio-player.minimized .player-controls {
      opacity: 0;
      pointer-events: none;
      height: 0;
      overflow: hidden;
      margin: 0;
      padding: 0;
    }

    .audio-player.minimized .player-title {
      max-width: 280px;
      font-size: 0.85rem;
    }

    .audio-player.minimized .minimize-button i {
      transform: rotate(180deg);
    }

    .control-button {
      background: transparent;
      border: none;
      color: rgb(196, 179, 95);
      font-size: 1.2rem;
      cursor: pointer;
      width: 24px;
      text-align: center;
    }

    .progress-bar {
      position: relative;
      background: #444;
      height: 6px;
      border-radius: 8px;
      flex-grow: 1;
      cursor: pointer;
      overflow: hidden;
    }

    .progress-bar #progress {
      background: rgb(196, 179, 95);
      height: 100%;
      width: 0%;
      border-radius: 8px 0 0 8px;
      transition: width 0.1s linear;
    }

    .progress-bar #progress-text {
      position: absolute;
      top: -14px;
      width: 100%;
      text-align: center;
      color: rgb(196, 179, 95);
      font-family: monospace;
      font-size: 0.65rem;
      pointer-events: none;
    }

    .volume-slider {
      -webkit-appearance: none;
      width: 80px;
      height: 4px;
      background: #ccc;
      border-radius: 2px;
      cursor: pointer;
    }
    .volume-slider::-webkit-slider-thumb,
    .volume-slider::-moz-range-thumb {
      width: 10px;
      height: 10px;
      background: rgb(196, 179, 95);
      border-radius: 50%;
      border: none;
      cursor: pointer;
    }

    @media (max-width: 600px) {
      .audio-player.minimized {
        width: 48px !important;
        height: 48px !important;
        padding: 4px !important;
        border-radius: 50%;
        flex-direction: row;
        align-items: center;
        justify-content: center;
      }
      .audio-player.minimized .player-title,
      .audio-player.minimized .player-controls,
      .audio-player.minimized #progress-container,
      .audio-player.minimized .volume-slider,
      .audio-player.minimized #volume-icon {
        display: none !important;
      }
      .audio-player.minimized .minimize-button {
        display: flex !important;
        position: absolute;
        top: 2px;
        right: 2px;
      }
      .audio-player.minimized .player-header {
        font-size: 1.4rem;
        color: rgb(196, 179, 95);
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const playlist = [
        { name: 'VOZ DE TROVÃO - COLO DE DEUS', file: '/music/voz_de_trovao.mp3' },
        { name: 'Outra música', file: '/music/outra_musica.mp3' },
      ];

      const STORAGE_KEY = 'audioPlayerState';

      let currentIndex = 0;
      const audio = document.getElementById('player');
      const audioSource = document.getElementById('audio-source');
      const title = document.getElementById('player-title');
      const toggle = document.getElementById('toggle-audio');
      const prevBtn = document.getElementById('prev-audio');
      const nextBtn = document.getElementById('next-audio');
      const progressContainer = document.getElementById('progress-container');
      const progress = document.getElementById('progress');
      const progressText = document.getElementById('progress-text');
      const volumeControl = document.getElementById('volume-control');
      const volumeIconBtn = document.getElementById('volume-icon');
      const volumeIcon = volumeIconBtn.querySelector('i');
      const audioPlayer = document.getElementById('audio-player');
      const minimizeBtn = document.getElementById('toggle-minimize');

      function loadPlayerState() {
        const raw = localStorage.getItem(STORAGE_KEY);
        return raw
          ? JSON.parse(raw)
          : {
              currentIndex: 0,
              minimized: true,
              isPlaying: false,
              tracks: {},
            };
      }

      function savePlayerState(state) {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
      }

      function saveTrackState(currentTime, volume) {
        const state = loadPlayerState();
        const trackKey = playlist[currentIndex].file;
        state.tracks[trackKey] = { currentTime, volume };
        savePlayerState(state);
      }

      function loadTrackState() {
        const state = loadPlayerState();
        const trackKey = playlist[currentIndex].file;
        return state.tracks[trackKey] || null;
      }

      function updateVolumeIcon(vol) {
        if (vol === 0) volumeIcon.className = 'fas fa-volume-mute';
        else if (vol < 0.5) volumeIcon.className = 'fas fa-volume-down';
        else volumeIcon.className = 'fas fa-volume-up';
      }

      function loadTrack(i) {
        currentIndex = i;
        const t = playlist[i];
        audioSource.src = t.file;
        audio.load();
        title.innerHTML = `🎧 ${t.name}`;
        toggle.querySelector('i').className = 'fas fa-play-circle';

        audio.addEventListener(
          'loadedmetadata',
          () => {
            const trackState = loadTrackState();
            if (trackState && trackState.currentTime < audio.duration) {
              audio.currentTime = trackState.currentTime;
            } else {
              audio.currentTime = 0;
            }
            if (trackState && trackState.volume !== undefined) {
              audio.volume = trackState.volume;
              volumeControl.value = trackState.volume;
              updateVolumeIcon(trackState.volume);
            } else {
              audio.volume = 1;
              volumeControl.value = 1;
              updateVolumeIcon(1);
            }

            progress.style.width = (audio.currentTime / audio.duration) * 100 + '%';
            progressText.textContent = `${formatTime(audio.currentTime)} / ${formatTime(audio.duration)}`;

            const state = loadPlayerState();

            if (state.minimized) {
              audioPlayer.classList.add('minimized');
              minimizeBtn.querySelector('i').style.transform = 'rotate(180deg)';
            } else {
              audioPlayer.classList.remove('minimized');
              minimizeBtn.querySelector('i').style.transform = 'rotate(0deg)';
            }

            if (state.isPlaying) {
              audio.play();
              toggle.querySelector('i').className = 'fas fa-pause-circle';
            }
          },
          { once: true }
        );

        const state = loadPlayerState();
        state.currentIndex = i;
        savePlayerState(state);
      }

      function formatTime(sec) {
        const m = Math.floor(sec / 60)
          .toString()
          .padStart(2, '0');
        const s = Math.floor(sec % 60)
          .toString()
          .padStart(2, '0');
        return `${m}:${s}`;
      }

      function playPause() {
        if (audio.paused) {
          audio.play();
          toggle.querySelector('i').className = 'fas fa-pause-circle';
          const state = loadPlayerState();
          state.isPlaying = true;
          savePlayerState(state);
        } else {
          audio.pause();
          toggle.querySelector('i').className = 'fas fa-play-circle';
          const state = loadPlayerState();
          state.isPlaying = false;
          savePlayerState(state);
        }
      }

      prevBtn.onclick = () => {
        currentIndex = (currentIndex - 1 + playlist.length) % playlist.length;
        loadTrack(currentIndex);
        audio.play();
        const state = loadPlayerState();
        state.isPlaying = true;
        savePlayerState(state);
      };

      nextBtn.onclick = () => {
        currentIndex = (currentIndex + 1) % playlist.length;
        loadTrack(currentIndex);
        audio.play();
        const state = loadPlayerState();
        state.isPlaying = true;
        savePlayerState(state);
      };

      toggle.onclick = playPause;

      audio.ontimeupdate = () => {
        const pct = (audio.currentTime / audio.duration) * 100;
        progress.style.width = pct + '%';
        progressText.textContent = `${formatTime(audio.currentTime)} / ${formatTime(audio.duration)}`;
        saveTrackState(audio.currentTime, audio.volume);
      };

      progressContainer.onclick = (e) => {
        const pct = e.offsetX / progressContainer.offsetWidth;
        audio.currentTime = pct * audio.duration;
        saveTrackState(audio.currentTime, audio.volume);
      };

      volumeControl.oninput = (e) => {
        audio.volume = e.target.value;
        updateVolumeIcon(audio.volume);
        saveTrackState(audio.currentTime, audio.volume);
      };

      volumeIconBtn.onclick = () => {
        if (audio.volume > 0) {
          audio.volume = 0;
          volumeControl.value = 0;
        } else {
          audio.volume = 1;
          volumeControl.value = 1;
        }
        updateVolumeIcon(audio.volume);
        saveTrackState(audio.currentTime, audio.volume);
      };

      function togglePlayer() {
        const minimized = audioPlayer.classList.toggle('minimized');
        const icon = minimizeBtn.querySelector('i');
        icon.style.transform = minimized ? 'rotate(180deg)' : 'rotate(0deg)';
        const state = loadPlayerState();
        state.minimized = minimized;
        savePlayerState(state);
      }

      minimizeBtn.onclick = togglePlayer;
      title.onclick = togglePlayer;

      const initialState = loadPlayerState();
      if (initialState.currentIndex !== undefined && initialState.currentIndex < playlist.length) {
        currentIndex = initialState.currentIndex;
      }
      loadTrack(currentIndex);
    });
  </script>
</footer>
